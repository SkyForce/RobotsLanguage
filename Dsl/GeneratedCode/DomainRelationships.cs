//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainRelationship RobotModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.RobotModelHasElements.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.RobotModelHasElements.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1f1db859-6770-4fc3-8862-c3a1bb1d035e")]
	public partial class RobotModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RobotModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1f1db859, 0x6770, 0x4fc3, 0x88, 0x62, 0xc3, 0xa1, 0xbb, 0x1d, 0x03, 0x5e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RobotModelHasElements link in the same Partition as the given RobotModel
		/// </summary>
		/// <param name="source">RobotModel to use as the source of the relationship.</param>
		/// <param name="target">AbstractNode to use as the target of the relationship.</param>
		public RobotModelHasElements(RobotModel source, AbstractNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RobotModelHasElements.RobotModelDomainRoleId, source), new DslModeling::RoleAssignment(RobotModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RobotModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RobotModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RobotModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RobotModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RobotModel domain role code
		
		/// <summary>
		/// RobotModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid RobotModelDomainRoleId = new global::System.Guid(0xa2d74ab9, 0x0039, 0x439c, 0xa6, 0xff, 0xe2, 0xbd, 0x9f, 0xdf, 0x29, 0x4f);
		
		/// <summary>
		/// DomainRole RobotModel
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.RobotModelHasElements/RobotModel.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.RobotModelHasElements/RobotModel.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="SPbSU.RobotsLanguage.RobotModelHasElements/RobotModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a2d74ab9-0039-439c-a6ff-e2bd9fdf294f")]
		public virtual RobotModel RobotModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RobotModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, RobotModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RobotModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RobotModel of a AbstractNode
		/// <summary>
		/// Gets RobotModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RobotModel GetRobotModel(AbstractNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as RobotModel;
		}
		
		/// <summary>
		/// Sets RobotModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRobotModel(AbstractNode element, RobotModel newRobotModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newRobotModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x276cd009, 0xdcf9, 0x4166, 0xb4, 0x12, 0xf2, 0x2a, 0x7c, 0xfc, 0x96, 0xbd);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.RobotModelHasElements/Element.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.RobotModelHasElements/Element.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RobotModel", PropertyDisplayNameKey="SPbSU.RobotsLanguage.RobotModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("276cd009-dcf9-4166-b412-f22a7cfc96bd")]
		public virtual AbstractNode Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a RobotModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AbstractNode> GetElements(RobotModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractNode>, AbstractNode>(element, RobotModelDomainRoleId);
		}
		#endregion
		#region RobotModel link accessor
		/// <summary>
		/// Get the list of RobotModelHasElements links to a RobotModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.RobotModelHasElements> GetLinksToElements ( global::SPbSU.RobotsLanguage.RobotModel robotModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.RobotModelHasElements>(robotModelInstance, global::SPbSU.RobotsLanguage.RobotModelHasElements.RobotModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the RobotModelHasElements link to a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SPbSU.RobotsLanguage.RobotModelHasElements GetLinkToRobotModel (global::SPbSU.RobotsLanguage.AbstractNode elementInstance)
		{
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.RobotModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.RobotModelHasElements>(elementInstance, global::SPbSU.RobotsLanguage.RobotModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RobotModelHasElements instance accessors
		
		/// <summary>
		/// Get any RobotModelHasElements links between a given RobotModel and a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.RobotModelHasElements> GetLinks( global::SPbSU.RobotsLanguage.RobotModel source, global::SPbSU.RobotsLanguage.AbstractNode target )
		{
			global::System.Collections.Generic.List<global::SPbSU.RobotsLanguage.RobotModelHasElements> outLinks = new global::System.Collections.Generic.List<global::SPbSU.RobotsLanguage.RobotModelHasElements>();
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.RobotModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.RobotModelHasElements>(source, global::SPbSU.RobotsLanguage.RobotModelHasElements.RobotModelDomainRoleId);
			foreach ( global::SPbSU.RobotsLanguage.RobotModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RobotModelHasElements link between a given RobotModeland a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SPbSU.RobotsLanguage.RobotModelHasElements GetLink( global::SPbSU.RobotsLanguage.RobotModel source, global::SPbSU.RobotsLanguage.AbstractNode target )
		{
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.RobotModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.RobotModelHasElements>(source, global::SPbSU.RobotsLanguage.RobotModelHasElements.RobotModelDomainRoleId);
			foreach ( global::SPbSU.RobotsLanguage.RobotModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainRelationship AbstractNodeReferencesTargetAbstractNode
	/// Description for SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1d688510-5d91-4320-afb3-7875c62fd843")]
	public partial class AbstractNodeReferencesTargetAbstractNode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AbstractNodeReferencesTargetAbstractNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d688510, 0x5d91, 0x4320, 0xaf, 0xb3, 0x78, 0x75, 0xc6, 0x2f, 0xd8, 0x43);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AbstractNodeReferencesTargetAbstractNode link in the same Partition as the given AbstractNode
		/// </summary>
		/// <param name="source">AbstractNode to use as the source of the relationship.</param>
		/// <param name="target">AbstractNode to use as the target of the relationship.</param>
		public AbstractNodeReferencesTargetAbstractNode(AbstractNode source, AbstractNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AbstractNodeReferencesTargetAbstractNode.SourceAbstractNodeDomainRoleId, source), new DslModeling::RoleAssignment(AbstractNodeReferencesTargetAbstractNode.TargetAbstractNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractNodeReferencesTargetAbstractNode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractNodeReferencesTargetAbstractNode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractNodeReferencesTargetAbstractNode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractNodeReferencesTargetAbstractNode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceAbstractNode domain role code
		
		/// <summary>
		/// SourceAbstractNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceAbstractNodeDomainRoleId = new global::System.Guid(0xcaa5b174, 0x6574, 0x469c, 0xaa, 0x81, 0x13, 0xf5, 0x7f, 0xa8, 0x22, 0x4b);
		
		/// <summary>
		/// DomainRole SourceAbstractNode
		/// Description for
		/// SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.SourceAbstractNode
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/SourceAbstractNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/SourceAbstractNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetAbstractNode", PropertyDisplayNameKey="SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/SourceAbstractNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("caa5b174-6574-469c-aa81-13f57fa8224b")]
		public virtual AbstractNode SourceAbstractNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceAbstractNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceAbstractNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceAbstractNode of a AbstractNode
		/// <summary>
		/// Gets a list of SourceAbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AbstractNode> GetSourceAbstractNode(AbstractNode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractNode>, AbstractNode>(element, TargetAbstractNodeDomainRoleId);
		}
		#endregion
		#region TargetAbstractNode domain role code
		
		/// <summary>
		/// TargetAbstractNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetAbstractNodeDomainRoleId = new global::System.Guid(0xdb2198f6, 0xd7f0, 0x4ac1, 0x8f, 0x3d, 0x4a, 0xe1, 0x04, 0xa0, 0x59, 0x63);
		
		/// <summary>
		/// DomainRole TargetAbstractNode
		/// Description for
		/// SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.TargetAbstractNode
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/TargetAbstractNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/TargetAbstractNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceAbstractNode", PropertyDisplayNameKey="SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/TargetAbstractNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("db2198f6-d7f0-4ac1-8f3d-4ae104a05963")]
		public virtual AbstractNode TargetAbstractNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetAbstractNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetAbstractNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetAbstractNode of a AbstractNode
		/// <summary>
		/// Gets a list of TargetAbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AbstractNode> GetTargetAbstractNode(AbstractNode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractNode>, AbstractNode>(element, SourceAbstractNodeDomainRoleId);
		}
		#endregion
		#region SourceAbstractNode link accessor
		/// <summary>
		/// Get the list of AbstractNodeReferencesTargetAbstractNode links to a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> GetLinksToTargetAbstractNode ( global::SPbSU.RobotsLanguage.AbstractNode sourceAbstractNodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode>(sourceAbstractNodeInstance, global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.SourceAbstractNodeDomainRoleId);
		}
		#endregion
		#region TargetAbstractNode link accessor
		/// <summary>
		/// Get the list of AbstractNodeReferencesTargetAbstractNode links to a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> GetLinksToSourceAbstractNode ( global::SPbSU.RobotsLanguage.AbstractNode targetAbstractNodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode>(targetAbstractNodeInstance, global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.TargetAbstractNodeDomainRoleId);
		}
		#endregion
		#region AbstractNodeReferencesTargetAbstractNode instance accessors
		
		/// <summary>
		/// Get any AbstractNodeReferencesTargetAbstractNode links between a given AbstractNode and a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> GetLinks( global::SPbSU.RobotsLanguage.AbstractNode source, global::SPbSU.RobotsLanguage.AbstractNode target )
		{
			global::System.Collections.Generic.List<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> outLinks = new global::System.Collections.Generic.List<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode>();
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode>(source, global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.SourceAbstractNodeDomainRoleId);
			foreach ( global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode link in links )
			{
				if ( target.Equals(link.TargetAbstractNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AbstractNodeReferencesTargetAbstractNode link between a given AbstractNodeand a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode GetLink( global::SPbSU.RobotsLanguage.AbstractNode source, global::SPbSU.RobotsLanguage.AbstractNode target )
		{
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode>(source, global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.SourceAbstractNodeDomainRoleId);
			foreach ( global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode link in links )
			{
				if ( target.Equals(link.TargetAbstractNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
