//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainRelationship AbstractNodeReferencesTargetAbstractNode
	/// Description for SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1d688510-5d91-4320-afb3-7875c62fd843")]
	public partial class AbstractNodeReferencesTargetAbstractNode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AbstractNodeReferencesTargetAbstractNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d688510, 0x5d91, 0x4320, 0xaf, 0xb3, 0x78, 0x75, 0xc6, 0x2f, 0xd8, 0x43);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AbstractNodeReferencesTargetAbstractNode link in the same Partition as the given AbstractNode
		/// </summary>
		/// <param name="source">AbstractNode to use as the source of the relationship.</param>
		/// <param name="target">AbstractNode to use as the target of the relationship.</param>
		public AbstractNodeReferencesTargetAbstractNode(AbstractNode source, AbstractNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AbstractNodeReferencesTargetAbstractNode.SourceAbstractNodeDomainRoleId, source), new DslModeling::RoleAssignment(AbstractNodeReferencesTargetAbstractNode.TargetAbstractNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractNodeReferencesTargetAbstractNode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractNodeReferencesTargetAbstractNode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractNodeReferencesTargetAbstractNode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractNodeReferencesTargetAbstractNode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceAbstractNode domain role code
		
		/// <summary>
		/// SourceAbstractNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceAbstractNodeDomainRoleId = new global::System.Guid(0xcaa5b174, 0x6574, 0x469c, 0xaa, 0x81, 0x13, 0xf5, 0x7f, 0xa8, 0x22, 0x4b);
		
		/// <summary>
		/// DomainRole SourceAbstractNode
		/// Description for
		/// SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.SourceAbstractNode
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/SourceAbstractNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/SourceAbstractNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetAbstractNode", PropertyDisplayNameKey="SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/SourceAbstractNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("caa5b174-6574-469c-aa81-13f57fa8224b")]
		public virtual AbstractNode SourceAbstractNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceAbstractNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceAbstractNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceAbstractNode of a AbstractNode
		/// <summary>
		/// Gets a list of SourceAbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AbstractNode> GetSourceAbstractNode(AbstractNode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractNode>, AbstractNode>(element, TargetAbstractNodeDomainRoleId);
		}
		#endregion
		#region TargetAbstractNode domain role code
		
		/// <summary>
		/// TargetAbstractNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetAbstractNodeDomainRoleId = new global::System.Guid(0xdb2198f6, 0xd7f0, 0x4ac1, 0x8f, 0x3d, 0x4a, 0xe1, 0x04, 0xa0, 0x59, 0x63);
		
		/// <summary>
		/// DomainRole TargetAbstractNode
		/// Description for
		/// SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.TargetAbstractNode
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/TargetAbstractNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/TargetAbstractNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceAbstractNode", PropertyDisplayNameKey="SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode/TargetAbstractNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("db2198f6-d7f0-4ac1-8f3d-4ae104a05963")]
		public virtual AbstractNode TargetAbstractNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetAbstractNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetAbstractNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetAbstractNode of a AbstractNode
		/// <summary>
		/// Gets a list of TargetAbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AbstractNode> GetTargetAbstractNode(AbstractNode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractNode>, AbstractNode>(element, SourceAbstractNodeDomainRoleId);
		}
		#endregion
		#region SourceAbstractNode link accessor
		/// <summary>
		/// Get the list of AbstractNodeReferencesTargetAbstractNode links to a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> GetLinksToTargetAbstractNode ( global::SPbSU.RobotsLanguage.AbstractNode sourceAbstractNodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode>(sourceAbstractNodeInstance, global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.SourceAbstractNodeDomainRoleId);
		}
		#endregion
		#region TargetAbstractNode link accessor
		/// <summary>
		/// Get the list of AbstractNodeReferencesTargetAbstractNode links to a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> GetLinksToSourceAbstractNode ( global::SPbSU.RobotsLanguage.AbstractNode targetAbstractNodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode>(targetAbstractNodeInstance, global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.TargetAbstractNodeDomainRoleId);
		}
		#endregion
		#region AbstractNodeReferencesTargetAbstractNode instance accessors
		
		/// <summary>
		/// Get any AbstractNodeReferencesTargetAbstractNode links between a given AbstractNode and a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> GetLinks( global::SPbSU.RobotsLanguage.AbstractNode source, global::SPbSU.RobotsLanguage.AbstractNode target )
		{
			global::System.Collections.Generic.List<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> outLinks = new global::System.Collections.Generic.List<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode>();
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode>(source, global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.SourceAbstractNodeDomainRoleId);
			foreach ( global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode link in links )
			{
				if ( target.Equals(link.TargetAbstractNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AbstractNodeReferencesTargetAbstractNode link between a given AbstractNodeand a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode GetLink( global::SPbSU.RobotsLanguage.AbstractNode source, global::SPbSU.RobotsLanguage.AbstractNode target )
		{
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode>(source, global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.SourceAbstractNodeDomainRoleId);
			foreach ( global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode link in links )
			{
				if ( target.Equals(link.TargetAbstractNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainRelationship CompoundHasAbstractNode
	/// Description for SPbSU.RobotsLanguage.CompoundHasAbstractNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.CompoundHasAbstractNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.CompoundHasAbstractNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7f7180b7-a5ef-4827-bca5-ee56c27fc928")]
	public partial class CompoundHasAbstractNode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CompoundHasAbstractNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7f7180b7, 0xa5ef, 0x4827, 0xbc, 0xa5, 0xee, 0x56, 0xc2, 0x7f, 0xc9, 0x28);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CompoundHasAbstractNode link in the same Partition as the given Compound
		/// </summary>
		/// <param name="source">Compound to use as the source of the relationship.</param>
		/// <param name="target">AbstractNode to use as the target of the relationship.</param>
		public CompoundHasAbstractNode(Compound source, AbstractNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CompoundHasAbstractNode.CompoundDomainRoleId, source), new DslModeling::RoleAssignment(CompoundHasAbstractNode.AbstractNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CompoundHasAbstractNode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CompoundHasAbstractNode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CompoundHasAbstractNode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CompoundHasAbstractNode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Compound domain role code
		
		/// <summary>
		/// Compound domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompoundDomainRoleId = new global::System.Guid(0x4fdb783e, 0x3c01, 0x4abc, 0x94, 0x85, 0x4e, 0x34, 0x7c, 0x4b, 0x9e, 0xc2);
		
		/// <summary>
		/// DomainRole Compound
		/// Description for SPbSU.RobotsLanguage.CompoundHasAbstractNode.Compound
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.CompoundHasAbstractNode/Compound.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.CompoundHasAbstractNode/Compound.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AbstractNode", PropertyDisplayNameKey="SPbSU.RobotsLanguage.CompoundHasAbstractNode/Compound.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4fdb783e-3c01-4abc-9485-4e347c4b9ec2")]
		public virtual Compound Compound
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Compound)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompoundDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompoundDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Compound of a AbstractNode
		/// <summary>
		/// Gets Compound.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Compound GetCompound(AbstractNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbstractNodeDomainRoleId) as Compound;
		}
		
		/// <summary>
		/// Sets Compound.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCompound(AbstractNode element, Compound newCompound)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbstractNodeDomainRoleId, newCompound);
		}
		#endregion
		#region AbstractNode domain role code
		
		/// <summary>
		/// AbstractNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractNodeDomainRoleId = new global::System.Guid(0x587d308c, 0x9a63, 0x4476, 0x88, 0x24, 0xc5, 0x4a, 0xce, 0x59, 0xfd, 0x3e);
		
		/// <summary>
		/// DomainRole AbstractNode
		/// Description for SPbSU.RobotsLanguage.CompoundHasAbstractNode.AbstractNode
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.CompoundHasAbstractNode/AbstractNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.CompoundHasAbstractNode/AbstractNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Compound", PropertyDisplayNameKey="SPbSU.RobotsLanguage.CompoundHasAbstractNode/AbstractNode.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("587d308c-9a63-4476-8824-c54ace59fd3e")]
		public virtual AbstractNode AbstractNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbstractNode of a Compound
		/// <summary>
		/// Gets a list of AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AbstractNode> GetAbstractNode(Compound element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractNode>, AbstractNode>(element, CompoundDomainRoleId);
		}
		#endregion
		#region Compound link accessor
		/// <summary>
		/// Get the list of CompoundHasAbstractNode links to a Compound.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.CompoundHasAbstractNode> GetLinksToAbstractNode ( global::SPbSU.RobotsLanguage.Compound compoundInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.CompoundHasAbstractNode>(compoundInstance, global::SPbSU.RobotsLanguage.CompoundHasAbstractNode.CompoundDomainRoleId);
		}
		#endregion
		#region AbstractNode link accessor
		/// <summary>
		/// Get the CompoundHasAbstractNode link to a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SPbSU.RobotsLanguage.CompoundHasAbstractNode GetLinkToCompound (global::SPbSU.RobotsLanguage.AbstractNode abstractNodeInstance)
		{
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.CompoundHasAbstractNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.CompoundHasAbstractNode>(abstractNodeInstance, global::SPbSU.RobotsLanguage.CompoundHasAbstractNode.AbstractNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AbstractNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CompoundHasAbstractNode instance accessors
		
		/// <summary>
		/// Get any CompoundHasAbstractNode links between a given Compound and a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.CompoundHasAbstractNode> GetLinks( global::SPbSU.RobotsLanguage.Compound source, global::SPbSU.RobotsLanguage.AbstractNode target )
		{
			global::System.Collections.Generic.List<global::SPbSU.RobotsLanguage.CompoundHasAbstractNode> outLinks = new global::System.Collections.Generic.List<global::SPbSU.RobotsLanguage.CompoundHasAbstractNode>();
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.CompoundHasAbstractNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.CompoundHasAbstractNode>(source, global::SPbSU.RobotsLanguage.CompoundHasAbstractNode.CompoundDomainRoleId);
			foreach ( global::SPbSU.RobotsLanguage.CompoundHasAbstractNode link in links )
			{
				if ( target.Equals(link.AbstractNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CompoundHasAbstractNode link between a given Compoundand a AbstractNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SPbSU.RobotsLanguage.CompoundHasAbstractNode GetLink( global::SPbSU.RobotsLanguage.Compound source, global::SPbSU.RobotsLanguage.AbstractNode target )
		{
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.CompoundHasAbstractNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.CompoundHasAbstractNode>(source, global::SPbSU.RobotsLanguage.CompoundHasAbstractNode.CompoundDomainRoleId);
			foreach ( global::SPbSU.RobotsLanguage.CompoundHasAbstractNode link in links )
			{
				if ( target.Equals(link.AbstractNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainRelationship CompoundHasSubprogramNode
	/// Description for SPbSU.RobotsLanguage.CompoundHasSubprogramNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.CompoundHasSubprogramNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.CompoundHasSubprogramNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5807bbd7-2455-45df-accc-3841e93f902f")]
	public partial class CompoundHasSubprogramNode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CompoundHasSubprogramNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5807bbd7, 0x2455, 0x45df, 0xac, 0xcc, 0x38, 0x41, 0xe9, 0x3f, 0x90, 0x2f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CompoundHasSubprogramNode link in the same Partition as the given Compound
		/// </summary>
		/// <param name="source">Compound to use as the source of the relationship.</param>
		/// <param name="target">SubprogramNode to use as the target of the relationship.</param>
		public CompoundHasSubprogramNode(Compound source, SubprogramNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CompoundHasSubprogramNode.CompoundDomainRoleId, source), new DslModeling::RoleAssignment(CompoundHasSubprogramNode.SubprogramNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CompoundHasSubprogramNode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CompoundHasSubprogramNode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CompoundHasSubprogramNode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CompoundHasSubprogramNode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Compound domain role code
		
		/// <summary>
		/// Compound domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompoundDomainRoleId = new global::System.Guid(0x6968a40d, 0x7270, 0x4252, 0x8c, 0x6c, 0x55, 0x44, 0xb6, 0xf0, 0xa2, 0x5b);
		
		/// <summary>
		/// DomainRole Compound
		/// Description for SPbSU.RobotsLanguage.CompoundHasSubprogramNode.Compound
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.CompoundHasSubprogramNode/Compound.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.CompoundHasSubprogramNode/Compound.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SubprogramNode", PropertyDisplayNameKey="SPbSU.RobotsLanguage.CompoundHasSubprogramNode/Compound.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6968a40d-7270-4252-8c6c-5544b6f0a25b")]
		public virtual Compound Compound
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Compound)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompoundDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompoundDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Compound of a SubprogramNode
		/// <summary>
		/// Gets Compound.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Compound GetCompound(SubprogramNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubprogramNodeDomainRoleId) as Compound;
		}
		
		/// <summary>
		/// Sets Compound.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCompound(SubprogramNode element, Compound newCompound)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubprogramNodeDomainRoleId, newCompound);
		}
		#endregion
		#region SubprogramNode domain role code
		
		/// <summary>
		/// SubprogramNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubprogramNodeDomainRoleId = new global::System.Guid(0x59e11ac3, 0x5bc2, 0x4f9b, 0xb4, 0x71, 0xaa, 0x18, 0xdb, 0x68, 0xc5, 0x71);
		
		/// <summary>
		/// DomainRole SubprogramNode
		/// Description for SPbSU.RobotsLanguage.CompoundHasSubprogramNode.SubprogramNode
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.CompoundHasSubprogramNode/SubprogramNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.CompoundHasSubprogramNode/SubprogramNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Compound", PropertyDisplayNameKey="SPbSU.RobotsLanguage.CompoundHasSubprogramNode/SubprogramNode.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("59e11ac3-5bc2-4f9b-b471-aa18db68c571")]
		public virtual SubprogramNode SubprogramNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubprogramNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubprogramNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubprogramNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubprogramNode of a Compound
		/// <summary>
		/// Gets a list of SubprogramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SubprogramNode> GetSubprogramNode(Compound element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SubprogramNode>, SubprogramNode>(element, CompoundDomainRoleId);
		}
		#endregion
		#region Compound link accessor
		/// <summary>
		/// Get the list of CompoundHasSubprogramNode links to a Compound.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode> GetLinksToSubprogramNode ( global::SPbSU.RobotsLanguage.Compound compoundInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode>(compoundInstance, global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode.CompoundDomainRoleId);
		}
		#endregion
		#region SubprogramNode link accessor
		/// <summary>
		/// Get the CompoundHasSubprogramNode link to a SubprogramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode GetLinkToCompound (global::SPbSU.RobotsLanguage.SubprogramNode subprogramNodeInstance)
		{
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode>(subprogramNodeInstance, global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode.SubprogramNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubprogramNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CompoundHasSubprogramNode instance accessors
		
		/// <summary>
		/// Get any CompoundHasSubprogramNode links between a given Compound and a SubprogramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode> GetLinks( global::SPbSU.RobotsLanguage.Compound source, global::SPbSU.RobotsLanguage.SubprogramNode target )
		{
			global::System.Collections.Generic.List<global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode> outLinks = new global::System.Collections.Generic.List<global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode>();
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode>(source, global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode.CompoundDomainRoleId);
			foreach ( global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode link in links )
			{
				if ( target.Equals(link.SubprogramNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CompoundHasSubprogramNode link between a given Compoundand a SubprogramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode GetLink( global::SPbSU.RobotsLanguage.Compound source, global::SPbSU.RobotsLanguage.SubprogramNode target )
		{
			global::System.Collections.Generic.IList<global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode>(source, global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode.CompoundDomainRoleId);
			foreach ( global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode link in links )
			{
				if ( target.Equals(link.SubprogramNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
