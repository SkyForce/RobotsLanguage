//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass RobotModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.RobotModel.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.RobotModel.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("55fa0139-cb00-4fa4-863f-f478a6c79aff")]
	public partial class RobotModel : Compound
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RobotModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x55fa0139, 0xcb00, 0x4fa4, 0x86, 0x3f, 0xf4, 0x78, 0xa6, 0xc7, 0x9a, 0xff);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RobotModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RobotModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass AbstractNode
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.AbstractNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.AbstractNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (ElemName = {elemNamePropertyStorage})")]
	[DslModeling::DomainObjectId("55b183c1-cce3-4840-b116-fd5ffad02289")]
	public abstract partial class AbstractNode : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AbstractNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x55b183c1, 0xcce3, 0x4840, 0xb1, 0x16, 0xfd, 0x5f, 0xfa, 0xd0, 0x22, 0x89);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected AbstractNode(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ElemName domain property code
		
		/// <summary>
		/// ElemName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ElemNameDomainPropertyId = new global::System.Guid(0x18a7f25c, 0x95fa, 0x4431, 0x99, 0xf4, 0x2c, 0x20, 0xd6, 0xb1, 0xca, 0x3b);
		
		/// <summary>
		/// Storage for ElemName
		/// </summary>
		private global::System.String elemNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ElemName domain property.
		/// Description for SPbSU.RobotsLanguage.AbstractNode.Elem Name
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.AbstractNode/ElemName.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.AbstractNode/ElemName.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("18a7f25c-95fa-4431-99f4-2c20d6b1ca3b")]
		public global::System.String ElemName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return elemNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ElemNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AbstractNode.ElemName domain property.
		/// </summary>
		internal sealed partial class ElemNamePropertyHandler : DslModeling::DomainPropertyValueHandler<AbstractNode, global::System.String>
		{
			private ElemNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AbstractNode.ElemName domain property value handler.
			/// </summary>
			public static readonly ElemNamePropertyHandler Instance = new ElemNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AbstractNode.ElemName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ElemNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AbstractNode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.elemNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AbstractNode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.elemNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetAbstractNode opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetAbstractNode.
		/// Description for
		/// SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.SourceAbstractNode
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AbstractNode> TargetAbstractNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractNode>, AbstractNode>(global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.SourceAbstractNodeDomainRoleId);
			}
		}
		#endregion
		#region SourceAbstractNode opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceAbstractNode.
		/// Description for
		/// SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.TargetAbstractNode
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AbstractNode> SourceAbstractNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractNode>, AbstractNode>(global::SPbSU.RobotsLanguage.AbstractNodeReferencesTargetAbstractNode.TargetAbstractNodeDomainRoleId);
			}
		}
		#endregion
		#region Compound opposite domain role accessor
		/// <summary>
		/// Gets or sets Compound.
		/// Description for SPbSU.RobotsLanguage.CompoundHasAbstractNode.AbstractNode
		/// </summary>
		public virtual Compound Compound
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::SPbSU.RobotsLanguage.CompoundHasAbstractNode.AbstractNodeDomainRoleId) as Compound;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::SPbSU.RobotsLanguage.CompoundHasAbstractNode.AbstractNodeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass StartNode
	/// Description for SPbSU.RobotsLanguage.StartNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.StartNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.StartNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("027205a2-e68c-4d40-ba39-ece4a495a665")]
	public partial class StartNode : AbstractNode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// StartNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x027205a2, 0xe68c, 0x4d40, 0xba, 0x39, 0xec, 0xe4, 0xa4, 0x95, 0xa6, 0x65);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass FinishNode
	/// Description for SPbSU.RobotsLanguage.FinishNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.FinishNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.FinishNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("dace7fcb-5886-4442-9f1d-26c791759043")]
	public partial class FinishNode : AbstractNode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FinishNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdace7fcb, 0x5886, 0x4442, 0x9f, 0x1d, 0x26, 0xc7, 0x91, 0x75, 0x90, 0x43);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FinishNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FinishNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass Compound
	/// Description for SPbSU.RobotsLanguage.Compound
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.Compound.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.Compound.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("46b80a85-0307-40a7-9260-5fb54debfe60")]
	public abstract partial class Compound : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Compound domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x46b80a85, 0x0307, 0x40a7, 0x92, 0x60, 0x5f, 0xb5, 0x4d, 0xeb, 0xfe, 0x60);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Compound(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AbstractNode opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AbstractNode.
		/// Description for SPbSU.RobotsLanguage.CompoundHasAbstractNode.Compound
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AbstractNode> AbstractNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractNode>, AbstractNode>(global::SPbSU.RobotsLanguage.CompoundHasAbstractNode.CompoundDomainRoleId);
			}
		}
		#endregion
		#region SubprogramNode opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SubprogramNode.
		/// Description for SPbSU.RobotsLanguage.CompoundHasSubprogramNode.Compound
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SubprogramNode> SubprogramNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SubprogramNode>, SubprogramNode>(global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode.CompoundDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::SPbSU.RobotsLanguage.SubprogramNode.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::SPbSU.RobotsLanguage.AbstractNode.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::SPbSU.RobotsLanguage.SubprogramNode sourceSubprogramNode1 = sourceElement as global::SPbSU.RobotsLanguage.SubprogramNode;
			if (sourceSubprogramNode1 != null)
			{
				// Create link for path CompoundHasSubprogramNode.SubprogramNode
				this.SubprogramNode.Add(sourceSubprogramNode1);

				return;
			}
				
			global::SPbSU.RobotsLanguage.AbstractNode sourceAbstractNode2 = sourceElement as global::SPbSU.RobotsLanguage.AbstractNode;
			if (sourceAbstractNode2 != null)
			{
				// Create link for path CompoundHasAbstractNode.AbstractNode
				this.AbstractNode.Add(sourceAbstractNode2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::SPbSU.RobotsLanguage.SubprogramNode sourceSubprogramNode1 = sourceElement as global::SPbSU.RobotsLanguage.SubprogramNode;
			if (sourceSubprogramNode1 != null)
			{
				// Delete link for path CompoundHasSubprogramNode.SubprogramNode
				
				foreach (DslModeling::ElementLink link in global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode.GetLinks((global::SPbSU.RobotsLanguage.Compound)this, sourceSubprogramNode1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode.CompoundDomainRoleId, global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode.SubprogramNodeDomainRoleId);
				}

				return;
			}
				
			global::SPbSU.RobotsLanguage.AbstractNode sourceAbstractNode2 = sourceElement as global::SPbSU.RobotsLanguage.AbstractNode;
			if (sourceAbstractNode2 != null)
			{
				// Delete link for path CompoundHasAbstractNode.AbstractNode
				
				foreach (DslModeling::ElementLink link in global::SPbSU.RobotsLanguage.CompoundHasAbstractNode.GetLinks((global::SPbSU.RobotsLanguage.Compound)this, sourceAbstractNode2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::SPbSU.RobotsLanguage.CompoundHasAbstractNode.CompoundDomainRoleId, global::SPbSU.RobotsLanguage.CompoundHasAbstractNode.AbstractNodeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass SubprogramNode
	/// Description for SPbSU.RobotsLanguage.SubprogramNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.SubprogramNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.SubprogramNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (ElemName = {elemNamePropertyStorage})")]
	[DslModeling::DomainObjectId("1d4b884e-32b1-4612-92c1-b160b2c70f7a")]
	public partial class SubprogramNode : Compound
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubprogramNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d4b884e, 0x32b1, 0x4612, 0x92, 0xc1, 0xb1, 0x60, 0xb2, 0xc7, 0x0f, 0x7a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubprogramNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubprogramNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ElemName domain property code
		
		/// <summary>
		/// ElemName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ElemNameDomainPropertyId = new global::System.Guid(0x02655334, 0x74c7, 0x4a29, 0xb6, 0x38, 0xf2, 0xbf, 0xef, 0xf2, 0x7c, 0x34);
		
		/// <summary>
		/// Storage for ElemName
		/// </summary>
		private global::System.String elemNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ElemName domain property.
		/// Description for SPbSU.RobotsLanguage.SubprogramNode.Elem Name
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.SubprogramNode/ElemName.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.SubprogramNode/ElemName.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("02655334-74c7-4a29-b638-f2bfeff27c34")]
		public global::System.String ElemName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return elemNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ElemNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubprogramNode.ElemName domain property.
		/// </summary>
		internal sealed partial class ElemNamePropertyHandler : DslModeling::DomainPropertyValueHandler<SubprogramNode, global::System.String>
		{
			private ElemNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubprogramNode.ElemName domain property value handler.
			/// </summary>
			public static readonly ElemNamePropertyHandler Instance = new ElemNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubprogramNode.ElemName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ElemNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SubprogramNode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.elemNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubprogramNode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.elemNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Compound opposite domain role accessor
		/// <summary>
		/// Gets or sets Compound.
		/// Description for SPbSU.RobotsLanguage.CompoundHasSubprogramNode.SubprogramNode
		/// </summary>
		public virtual Compound Compound
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode.SubprogramNodeDomainRoleId) as Compound;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::SPbSU.RobotsLanguage.CompoundHasSubprogramNode.SubprogramNodeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass IfNode
	/// Description for SPbSU.RobotsLanguage.IfNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.IfNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.IfNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("616b1380-5ce9-4492-90f2-67434d4a6910")]
	public partial class IfNode : AbstractNode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IfNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x616b1380, 0x5ce9, 0x4492, 0x90, 0xf2, 0x67, 0x43, 0x4d, 0x4a, 0x69, 0x10);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IfNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IfNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region condition domain property code
		
		/// <summary>
		/// condition domain property Id.
		/// </summary>
		public static readonly global::System.Guid conditionDomainPropertyId = new global::System.Guid(0x18da06d3, 0x9e00, 0x4b3e, 0x95, 0x95, 0x11, 0x96, 0xa2, 0x10, 0x17, 0x37);
		
		/// <summary>
		/// Storage for condition
		/// </summary>
		private global::System.String conditionPropertyStorage = "condition";
		
		/// <summary>
		/// Gets or sets the value of condition domain property.
		/// Description for SPbSU.RobotsLanguage.IfNode.Condition
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.IfNode/condition.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.IfNode/condition.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("condition")]
		[DslModeling::DomainObjectId("18da06d3-9e00-4b3e-9595-1196a2101737")]
		public global::System.String condition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return conditionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				conditionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IfNode.condition domain property.
		/// </summary>
		internal sealed partial class conditionPropertyHandler : DslModeling::DomainPropertyValueHandler<IfNode, global::System.String>
		{
			private conditionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IfNode.condition domain property value handler.
			/// </summary>
			public static readonly conditionPropertyHandler Instance = new conditionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IfNode.condition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return conditionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IfNode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.conditionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IfNode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.conditionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass EndIfNode
	/// Description for SPbSU.RobotsLanguage.EndIfNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.EndIfNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.EndIfNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5e430085-4c92-4e41-a4b9-1e9790d84b7a")]
	public partial class EndIfNode : AbstractNode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EndIfNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5e430085, 0x4c92, 0x4e41, 0xa4, 0xb9, 0x1e, 0x97, 0x90, 0xd8, 0x4b, 0x7a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EndIfNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EndIfNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass IterationsNode
	/// Description for SPbSU.RobotsLanguage.IterationsNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.IterationsNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.IterationsNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("995b91df-a86f-42ba-9348-bd97a4a50306")]
	public partial class IterationsNode : AbstractNode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IterationsNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x995b91df, 0xa86f, 0x42ba, 0x93, 0x48, 0xbd, 0x97, 0xa4, 0xa5, 0x03, 0x06);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IterationsNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IterationsNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region number domain property code
		
		/// <summary>
		/// number domain property Id.
		/// </summary>
		public static readonly global::System.Guid numberDomainPropertyId = new global::System.Guid(0xd0f2e232, 0xee5e, 0x4bb5, 0x8b, 0x18, 0xa8, 0x00, 0xc4, 0xdb, 0xdf, 0xc7);
		
		/// <summary>
		/// Storage for number
		/// </summary>
		private global::System.Int32 numberPropertyStorage = 10;
		
		/// <summary>
		/// Gets or sets the value of number domain property.
		/// Description for SPbSU.RobotsLanguage.IterationsNode.Number
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.IterationsNode/number.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.IterationsNode/number.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(10)]
		[DslModeling::DomainObjectId("d0f2e232-ee5e-4bb5-8b18-a800c4dbdfc7")]
		public global::System.Int32 number
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return numberPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				numberPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IterationsNode.number domain property.
		/// </summary>
		internal sealed partial class numberPropertyHandler : DslModeling::DomainPropertyValueHandler<IterationsNode, global::System.Int32>
		{
			private numberPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IterationsNode.number domain property value handler.
			/// </summary>
			public static readonly numberPropertyHandler Instance = new numberPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IterationsNode.number domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return numberDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(IterationsNode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.numberPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IterationsNode element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.numberPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass SubprogramCallNode
	/// Description for SPbSU.RobotsLanguage.SubprogramCallNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.SubprogramCallNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.SubprogramCallNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("15eb50e9-dd1f-4e16-b11b-a0d01aef3718")]
	public partial class SubprogramCallNode : AbstractNode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubprogramCallNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x15eb50e9, 0xdd1f, 0x4e16, 0xb1, 0x1b, 0xa0, 0xd0, 0x1a, 0xef, 0x37, 0x18);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubprogramCallNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubprogramCallNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Subprogram domain property code
		
		/// <summary>
		/// Subprogram domain property Id.
		/// </summary>
		public static readonly global::System.Guid SubprogramDomainPropertyId = new global::System.Guid(0x931d49bd, 0x0dfd, 0x43c9, 0xa3, 0x6f, 0x76, 0x8f, 0x7a, 0xa2, 0x46, 0x43);
		
		/// <summary>
		/// Storage for Subprogram
		/// </summary>
		private global::System.String subprogramPropertyStorage = "Subprogram";
		
		/// <summary>
		/// Gets or sets the value of Subprogram domain property.
		/// Description for SPbSU.RobotsLanguage.SubprogramCallNode.Subprogram
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.SubprogramCallNode/Subprogram.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.SubprogramCallNode/Subprogram.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Subprogram")]
		[DslModeling::DomainObjectId("931d49bd-0dfd-43c9-a36f-768f7aa24643")]
		public global::System.String Subprogram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return subprogramPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SubprogramPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubprogramCallNode.Subprogram domain property.
		/// </summary>
		internal sealed partial class SubprogramPropertyHandler : DslModeling::DomainPropertyValueHandler<SubprogramCallNode, global::System.String>
		{
			private SubprogramPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubprogramCallNode.Subprogram domain property value handler.
			/// </summary>
			public static readonly SubprogramPropertyHandler Instance = new SubprogramPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubprogramCallNode.Subprogram domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SubprogramDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SubprogramCallNode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.subprogramPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubprogramCallNode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.subprogramPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass ParallelNode
	/// Description for SPbSU.RobotsLanguage.ParallelNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.ParallelNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.ParallelNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1f952800-6025-4a3b-a498-407eccae749e")]
	public partial class ParallelNode : AbstractNode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ParallelNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1f952800, 0x6025, 0x4a3b, 0xa4, 0x98, 0x40, 0x7e, 0xcc, 0xae, 0x74, 0x9e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ParallelNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ParallelNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass EndParallelNode
	/// Description for SPbSU.RobotsLanguage.EndParallelNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.EndParallelNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.EndParallelNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("baf348e3-6cdf-4703-88e5-ce14a8111cc0")]
	public partial class EndParallelNode : AbstractNode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EndParallelNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbaf348e3, 0x6cdf, 0x4703, 0x88, 0xe5, 0xce, 0x14, 0xa8, 0x11, 0x1c, 0xc0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EndParallelNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EndParallelNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass BreakNode
	/// Description for SPbSU.RobotsLanguage.BreakNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.BreakNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.BreakNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1003be0e-277a-41a3-b4c0-8db1f065aa2a")]
	public partial class BreakNode : AbstractNode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BreakNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1003be0e, 0x277a, 0x41a3, 0xb4, 0xc0, 0x8d, 0xb1, 0xf0, 0x65, 0xaa, 0x2a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BreakNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BreakNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass SwitchNode
	/// Description for SPbSU.RobotsLanguage.SwitchNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.SwitchNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.SwitchNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4a312676-0f5c-4021-9ac5-e94e81834baa")]
	public partial class SwitchNode : AbstractNode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SwitchNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a312676, 0x0f5c, 0x4021, 0x9a, 0xc5, 0xe9, 0x4e, 0x81, 0x83, 0x4b, 0xaa);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SwitchNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SwitchNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Condition domain property code
		
		/// <summary>
		/// Condition domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConditionDomainPropertyId = new global::System.Guid(0x142607b8, 0x3b41, 0x4f7b, 0xbf, 0x67, 0x62, 0xfe, 0x2b, 0x48, 0xa7, 0x97);
		
		/// <summary>
		/// Storage for Condition
		/// </summary>
		private global::System.String conditionPropertyStorage = "condition";
		
		/// <summary>
		/// Gets or sets the value of Condition domain property.
		/// Description for SPbSU.RobotsLanguage.SwitchNode.Condition
		/// </summary>
		[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.SwitchNode/Condition.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.SwitchNode/Condition.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("condition")]
		[DslModeling::DomainObjectId("142607b8-3b41-4f7b-bf67-62fe2b48a797")]
		public global::System.String Condition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return conditionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConditionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SwitchNode.Condition domain property.
		/// </summary>
		internal sealed partial class ConditionPropertyHandler : DslModeling::DomainPropertyValueHandler<SwitchNode, global::System.String>
		{
			private ConditionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SwitchNode.Condition domain property value handler.
			/// </summary>
			public static readonly ConditionPropertyHandler Instance = new ConditionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SwitchNode.Condition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConditionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SwitchNode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.conditionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SwitchNode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.conditionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace SPbSU.RobotsLanguage
{
	/// <summary>
	/// DomainClass EndSwitchNode
	/// Description for SPbSU.RobotsLanguage.EndSwitchNode
	/// </summary>
	[DslDesign::DisplayNameResource("SPbSU.RobotsLanguage.EndSwitchNode.DisplayName", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SPbSU.RobotsLanguage.EndSwitchNode.Description", typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel), "SPbSU.RobotsLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SPbSU.RobotsLanguage.RobotsLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("37f16d00-0ec3-4b67-889f-d83d9fc1f99d")]
	public partial class EndSwitchNode : AbstractNode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EndSwitchNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x37f16d00, 0x0ec3, 0x4b67, 0x88, 0x9f, 0xd8, 0x3d, 0x9f, 0xc1, 0xf9, 0x9d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EndSwitchNode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EndSwitchNode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
